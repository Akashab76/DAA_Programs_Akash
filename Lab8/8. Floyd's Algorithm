#include <stdio.h>
#include <limits.h> 
#define V 4

void printSolution(int dist[][V]) {
    printf("Following matrix shows the shortest distances between all pairs of vertices:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INT_MAX)
                printf("INF\t");
            else
                printf("%d\t", dist[i][j]);
        }
        printf("\n");
    }
}

void floydWarshall(int graph[][V]) {
    int dist[V][V], i, j, k;

    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            dist[i][j] = graph[i][j];
        }
    }

    for (k = 0; k < V; k++) {
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++) {
                if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX &&
                    dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    printSolution(dist);
}

int main() {
    int graph[V][V];
    int i, j;

    // Input the adjacency matrix (graph)
    printf("Enter the adjacency matrix for the graph (use -1 for INF):\n");
    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            printf("Enter distance from vertex %d to vertex %d: ", i, j);
            int input;
            scanf("%d", &input);
            graph[i][j] = (input == -1) ? INT_MAX : input;
        }
    }

    floydWarshall(graph);

    return 0;
}
