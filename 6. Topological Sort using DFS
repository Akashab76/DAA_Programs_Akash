#include <stdio.h>
#include <stdlib.h>

#define MAX 100

struct Node {
    int vertex;
    struct Node* next;
};

struct Graph {
    int vertices;
    struct Node* adjList[MAX];
    int visited[MAX];
};

int stack[MAX];
int top = -1;

void push(int v) {
    stack[++top] = v;
}

int pop() {
    return stack[top--];
}

void addEdge(struct Graph* graph, int src, int dest) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->vertex = dest;
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;
}

void DFS(struct Graph* graph, int v) {
    graph->visited[v] = 1;
    struct Node* temp = graph->adjList[v];

    while (temp != NULL) {
        int u = temp->vertex;
        if (!graph->visited[u]) {
            DFS(graph, u);
        }
        temp = temp->next;
    }
    push(v); 
}

void topologicalSort(struct Graph* graph) {
    for (int i = 0; i < graph->vertices; i++)
        graph->visited[i] = 0;

    for (int i = 0; i < graph->vertices; i++)
        if (!graph->visited[i])
            DFS(graph, i);

    printf("Topological Sort: ");
    while (top != -1)
        printf("%d ", pop());
    printf("\n");
}

int main() {
    int V, E;
    printf("Enter number of vertices: ");
    scanf("%d", &V);

    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->vertices = V;

    for (int i = 0; i < V; i++) {
        graph->adjList[i] = NULL;
        graph->visited[i] = 0;
    }

    printf("Enter number of edges: ");
    scanf("%d", &E);
    printf("Enter edges (source destination):\n");
    for (int i = 0; i < E; i++) {
        int src, dest;
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }
    topologicalSort(graph);
    return 0;
}
